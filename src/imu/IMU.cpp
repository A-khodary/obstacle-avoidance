//
// Created by paul on 09/05/15.
//

#include <RTIMULibDefs.h>
#include <sstream>
#include "IMU.h"

IMU::IMU() {

    //  Using RTIMULib here allows it to use the .ini file generated by RTIMULibDemo.
    //  Or, you can create the .ini in some other directory by using:
    //      RTIMUSettings *settings = new RTIMUSettings("<directory path>", "RTIMULib");
    //  where <directory path> is the path to where the .ini file is to be loaded/saved
    RTIMUSettings *settings = new RTIMUSettings("RTIMULib");

    imu = RTIMU::createIMU(settings);

    if ((imu == NULL) || (imu->IMUType() == RTIMU_TYPE_NULL)) {
        printf("No IMU found\n");
        exit(1);
    }

    //  This is an opportunity to manually override any settings before the call IMUInit

    //  set up IMU
    imu->IMUInit();

    //  this is a convenient place to change fusion parameters
    imu->setSlerpPower(0.02);
    imu->setGyroEnable(true);
    imu->setAccelEnable(true);
    imu->setCompassEnable(true);

    std::thread tempThread(&IMU::start, this);
    std::swap(tempThread, imuThread);

}

void IMU::start() {
    //  now just process data
    while (1) {
        //  poll at the rate recommended by the IMU
        usleep(imu->IMUGetPollInterval() * 1000);

        while (imu->IMURead()) {
            imuData = imu->getIMUData();
        }
    }
}

IMU::~IMU() {

}

double IMU::getRollDeg() {
    return imuData.fusionPose.x() * RTMATH_RAD_TO_DEGREE;
}

double IMU::getPitchDeg() {
    return imuData.fusionPose.y() * RTMATH_RAD_TO_DEGREE;;
}

double IMU::getYawDeg() {
    return imuData.fusionPose.z() * RTMATH_RAD_TO_DEGREE;
}

std::string IMU::toString() {
    std::ostringstream stringStream;
    stringStream << "Roll: " << getRollDeg() <<
                    " Pitch: " << getPitchDeg() <<
                    " Yaw: " << getYawDeg() << std::endl;
    return stringStream.str();
}